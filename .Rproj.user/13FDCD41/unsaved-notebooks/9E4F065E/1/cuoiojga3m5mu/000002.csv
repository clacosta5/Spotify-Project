"0","# ADDING DATE AND TIMING"
"0","# prova con i secondi"
"0","mySpotify = streamHistory2 %>% "
"0","  as_tibble() %>% #as_tibble() turns an existing object, such as a data frame or matrix, into a so-called tibble"
"0","  mutate_at(""endTime"", ymd_hms) %>%  #aggiungo i secondi, cambio solo la colonna che si chiama ""endTIme"""
"0","  mutate(date = floor_date(endTime, ""day"") %>% as_date, seconds = msPlayed / 1000, minutes = seconds / 60) %>%"
"0","  mutate(artistName = str_replace(artistName, ""Sasha Sloan"", ""Sasha Alex Sloan""))"
"0","# date -> prendo la data e basta senza orario, ricavo secondi e minuti suonati"
"0","# floor_date prende un oggetto data-ora e lo arrotonda per difetto al valore intero più vicino dell'unità di tempo        specificata, nel mio caso per giorno"
"0",""
"0","mySpotify_2 = completeTot %>% "
"0","  as_tibble() %>% #as_tibble() turns an existing object, such as a data frame or matrix, into a so-called tibble"
"0","  mutate_at(""endTime"", ymd_hms) %>%  #aggiungo i secondi, cambio solo la colonna che si chiama ""endTIme"""
"0","  mutate(date = floor_date(endTime, ""day"") %>% as_date, seconds = msPlayed / 1000, minutes = seconds / 60)"
"0",""
"0","#primo periodo"
"0","oreStreamingUno = mySpotify_2 %>% "
"0","  filter(date <= ""2020-03-24"") %>% "
"0","  group_by(date) %>% "
"0","  group_by(date = floor_date(date, ""week"")) %>%  # raggruppo per settimane"
"0","  summarize(ore = sum(minutes) / 60) %>%         # sommo i minuti di ogni settimana / 60 = ore"
"0","  #verb summarise() riduce più valori fino a un singolo riassunto"
"0","  arrange(date) %>%                              # metto in ordine di data crescente"
"0","  ggplot(aes(x = date, y = ore)) + "
"0","  geom_col(aes(fill = ore)) +"
"0","  scale_fill_gradient(low = ""blue"", high = ""red"") + "
"0","  labs(x= ""data"", y= ""ore di ascolto"") + "
"0","  ggtitle(""Attività di ascolto per settimana da marzo 2018 a marzo 2020"")"
"0",""
"0","ggplotly(oreStreamingUno)"
