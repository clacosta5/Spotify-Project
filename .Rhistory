library(lubridate)
library(gghighlight)
library(spotifyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(dplyr)
library(kableExtra)
library(formattable)
library(genius)
library(fmsb)
# carico get spotify authorization
# ESTABLISH CONNECTION SPOTIFY API
id = "00f22c2d4c35499bb29854c73ffdff97"
id_secret = "46d59a3db5514cdd93c1de05365e57c8"
#idVale = "bebf67dce2c54886b1171591e84eeb4b"
#id_secretVale = "f7bdc08240ca4cacbe576181d472c2f8"
Sys.setenv(SPOTIFY_CLIENT_ID = id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = id_secret)
get_spotify_authorization_code()
access_token <- get_spotify_access_token()
oreStreamingUno = mySpotify_2 %>%
filter(date <= "2020-03-24") %>%
group_by(date) %>%
group_by(date = floor_date(date, "week")) %>%  # raggruppo per settimane
summarize(ore = sum(minutes) / 60) %>%         # sommo i minuti di ogni settimana / 60 = ore
#verb summarise() riduce più valori fino a un singolo riassunto
arrange(date) %>%                              # metto in ordine di data crescente
ggplot(aes(x = date, y = ore)) +
geom_col(aes(fill = ore)) +
scale_fill_gradient(low = "blue", high = "red") +
ylim(0, 45)
labs(x= "data", y= "ore di ascolto") +
ggtitle("Attività di ascolto per settimana da marzo 2018 a marzo 2020- primo periodo")
#primo periodo
oreStreamingUno = mySpotify_2 %>%
filter(date <= "2020-03-24") %>%
group_by(date) %>%
group_by(date = floor_date(date, "week")) %>%  # raggruppo per settimane
summarize(ore = sum(minutes) / 60) %>%         # sommo i minuti di ogni settimana / 60 = ore
#verb summarise() riduce più valori fino a un singolo riassunto
arrange(date) %>%                              # metto in ordine di data crescente
ggplot(aes(x = date, y = ore)) +
geom_col(aes(fill = ore)) +
scale_fill_gradient(low = "blue", high = "red") +
ylim(0, 45)+
labs(x= "data", y= "ore di ascolto") +
ggtitle("Attività di ascolto per settimana da marzo 2018 a marzo 2020- primo periodo")
ggplotly(oreStreamingUno)
#secondo periodo
oreStreamingDue = mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(date) %>%
group_by(date = floor_date(date, "week")) %>%  # raggruppo per settimane
summarize(ore = sum(minutes) / 60) %>%         # sommo i minuti di ogni settimana / 60 = ore
#verb summarise() riduce più valori fino a un singolo riassunto
arrange(date) %>%                              # metto in ordine di data crescente
ggplot(aes(x = date, y = ore)) +
geom_col(aes(fill = ore)) +
scale_fill_gradient(low = "blue", high = "red") +
ylim(0, 45)+
labs(x= "data", y= "ore di ascolto") +
ggtitle("Attività di ascolto per settimana da aprile 2020 a luglio 2021- secondo periodo")
ggplotly(oreStreamingDue)
#primo periodo
# metto tutti gli artisti così posso confrontare
oreArtistaUno <- mySpotify_2 %>%
filter(date <= "2020-03-24") %>%
group_by(artistName, date = floor_date(date, "month")) %>%  # raggruppo per ascolto mensile
summarize(hours = sum(minutes) / 60) %>%                    # sommo i minuti di ogni settimana / 60 = ore
ggplot(aes(x = date, y = hours, group = artistName)) +
geom_line(aes(color = artistName)) +
geom_point(aes(color = artistName)) +
labs(x= "date", y= "ore di ascolto") +
ylim(0, 68)+
ggtitle("artisti: The Lumineers, Halsey, Vasco Rossi, Demi Lovato, FLETCHER, Khalid") +
gghighlight(artistName == "The Lumineers" || artistName == "Halsey" || artistName == "Vasco Rossi" || artistName == "Demi Lovato" || artistName == "FLETCHER" || artistName == "Khalid" || artistName == "Taylor Swift" || artistName == "Lana Del Rey" || artistName == "Chase Atlantic" || artistName == "Lorde" || artistName == "blink-182" || artistName == "Avril Lavigne" || artistName == "Sasha Alex Sloan")
ggplotly(oreArtistaUno)
#secondo periodo
# metto tutti gli artisti così posso confrontare
oreArtistaDue <- mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(artistName, date = floor_date(date, "month")) %>%  # raggruppo per ascolto mensile
summarize(hours = sum(minutes) / 60) %>%                    # sommo i minuti di ogni settimana / 60 = ore
ggplot(aes(x = date, y = hours, group = artistName)) +
geom_line(aes(color = artistName)) +
geom_point(aes(color = artistName)) +
labs(x= "date", y= "ore di ascolto") +
ylim(0, 68)+
ggtitle("artisti: Taylor Swift, Lana Del Rey, Chase Atlantic, Lorde e blink-182") +
gghighlight(artistName == "Taylor Swift" || artistName == "Lana Del Rey" || artistName == "Chase Atlantic" || artistName == "Lorde" || artistName == "blink-182" || artistName == "Avril Lavigne" || artistName == "Sasha Alex Sloan" || artistName == "The Lumineers" || artistName == "Halsey" || artistName == "Vasco Rossi" || artistName == "Demi Lovato" || artistName == "FLETCHER" || artistName == "Khalid")
ggplotly(oreArtistaDue)
#primo periodo
# metto tutti gli artisti così posso confrontare
oreArtistaUno <- mySpotify_2 %>%
filter(date <= "2020-03-24") %>%
group_by(artistName, date = floor_date(date, "month")) %>%  # raggruppo per ascolto mensile
summarize(hours = sum(minutes) / 60) %>%                    # sommo i minuti di ogni settimana / 60 = ore
ggplot(aes(x = date, y = hours, group = artistName)) +
geom_line(aes(color = artistName)) +
geom_point(aes(color = artistName)) +
labs(x= "date", y= "ore di ascolto") +
#ylim(0, 68)+
ggtitle("artisti: The Lumineers, Halsey, Vasco Rossi, Demi Lovato, FLETCHER, Khalid") +
gghighlight(artistName == "The Lumineers" || artistName == "Halsey" || artistName == "Vasco Rossi" || artistName == "Demi Lovato" || artistName == "FLETCHER" || artistName == "Khalid" || artistName == "Taylor Swift" || artistName == "Lana Del Rey" || artistName == "Chase Atlantic" || artistName == "Lorde" || artistName == "blink-182" || artistName == "Avril Lavigne" || artistName == "Sasha Alex Sloan")
ggplotly(oreArtistaUno)
#secondo periodo
# metto tutti gli artisti così posso confrontare
oreArtistaDue <- mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(artistName, date = floor_date(date, "month")) %>%  # raggruppo per ascolto mensile
summarize(hours = sum(minutes) / 60) %>%                    # sommo i minuti di ogni settimana / 60 = ore
ggplot(aes(x = date, y = hours, group = artistName)) +
geom_line(aes(color = artistName)) +
geom_point(aes(color = artistName)) +
labs(x= "date", y= "ore di ascolto") +
#ylim(0, 68)+
ggtitle("artisti: Taylor Swift, Lana Del Rey, Chase Atlantic, Lorde e blink-182") +
gghighlight(artistName == "Taylor Swift" || artistName == "Lana Del Rey" || artistName == "Chase Atlantic" || artistName == "Lorde" || artistName == "blink-182" || artistName == "Avril Lavigne" || artistName == "Sasha Alex Sloan" || artistName == "The Lumineers" || artistName == "Halsey" || artistName == "Vasco Rossi" || artistName == "Demi Lovato" || artistName == "FLETCHER" || artistName == "Khalid")
ggplotly(oreArtistaDue)
#primo periodo
orePiuAscoltateUno <- mySpotify_2 %>%
filter(date <= "2020-03-24") %>%
group_by(artistName) %>%
summarize(minutiAscoltati = sum(minutes), oreAscoltate = minutiAscoltati/60) %>%
filter(minutiAscoltati >= 900) %>%
ggplot(aes(x = artistName, y = oreAscoltate, text = paste("artista: ", artistName, "<br>",
"ore ascoltate: ", round(oreAscoltate, digits = 0)))) +
geom_col(aes(fill = oreAscoltate)) +
scale_fill_gradient(low = "blue", high = "red") +
labs(x= "artista", y= "ore di ascolto") +
ggtitle("Quali sono i miei artisti più ascoltati? (> 15 ore di ascolto) - primo periodo") +
theme(axis.text.x = element_text(angle = 90))
ggplotly(orePiuAscoltateUno, tooltip=c("text"))
#secondo periodo
orePiuAscoltateDue <- mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(artistName) %>%
summarize(minutiAscoltati = sum(minutes), oreAscoltate = minutiAscoltati/60) %>%
filter(minutiAscoltati >= 900) %>%
ggplot(aes(x = artistName, y = oreAscoltate, text = paste("artista: ", artistName, "<br>",
"ore ascoltate: ", round(oreAscoltate, digits = 0)))) +
geom_col(aes(fill = oreAscoltate)) +
scale_fill_gradient(low = "blue", high = "red") +
labs(x= "artista", y= "ore di ascolto") +
ggtitle("Quali sono i miei artisti più ascoltati? (> 15 ore di ascolto) - secondo periodo") +
theme(axis.text.x = element_text(angle = 90))
ggplotly(orePiuAscoltateDue, tooltip=c("text"))
#primo periodo
timeDayUno <- mySpotify_2 %>%
filter(date <= "2020-03-24") %>%
group_by(date, hour = hour(endTime)) %>%                  # raggruppo per data e ora
summarize(minutiAscoltati = sum(minutes)) %>%             # minuti ascoltati
ggplot(aes(x = hour, y = date, fill = minutiAscoltati)) +
geom_tile() +
labs(x= "Ora del giorno", y= "Data") +
ggtitle("Quando c'è stata più attività di riproduzione sul mio Spotify?", "Attività per data e ora del giorno") +
scale_fill_gradient(low = "green", high = "blue", limits = c(0, 70))
timeDayUno
#secondo periodo
timeDayDue <- mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(date, hour = hour(endTime)) %>%                  # raggruppo per data e ora
summarize(minutiAscoltati = sum(minutes)) %>%             # minuti ascoltati
ggplot(aes(x = hour, y = date, fill = minutiAscoltati)) +
geom_tile() +
labs(x= "Ora del giorno", y= "Data") +
ggtitle("Quando c'è stata più attività di riproduzione sul mio Spotify?", "Attività per data e ora del giorno") +
scale_fill_gradient(low = "green", high = "blue", limits = c(0, 70))
timeDayDue
#primo periodo
hoursDayUno = mySpotify_2 %>%
filter(date <= "2020-03-24") %>%
group_by(date, ora = hour(endTime), weekday = wday(date, label = TRUE))%>% #wday visual weekday as a string
summarize(minutiAscoltati = sum(minutes), oreAscoltate = minutiAscoltati/60)%>%
ggplot(aes(x = ora, y = minutiAscoltati, group = date, text = paste("ora: ", ora, "<br>", "minuti ascoltati: ", round(minutiAscoltati, digits = 1), "<br>", "ore ascoltate: ", round(oreAscoltate, digits = 0)))) +
geom_col(fill = "#66b2ff") +
labs(x= "Ora del giorno", y= "Minuti di ascolto") +
ggtitle("Attività da 0 a 23h - primo periodo")
hoursDayUno
#secondo periodo
hoursDayDue <- mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(date, ora = hour(endTime), weekday = wday(date, label = TRUE))%>% #wday visual weekday as a string
summarize(minutiAscoltati = sum(minutes), oreAscoltate = minutiAscoltati/60) %>%
ggplot(aes(x = ora, y = minutiAscoltati, group = date, text = paste("ora: ", ora, "<br>", "minuti ascoltati: ", round(minutiAscoltati, digits = 1), "<br>", "ore ascoltate: ", round(oreAscoltate, digits = 0)))) +
geom_col(fill = "#66b2ff") +
labs(x= "Ora del giorno", y= "Minuti di ascolto - secondo periodo") +
ggtitle("Attività da 0 a 23h")
hoursDayDue
#secondo periodo
hoursDayDue <- mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(date, ora = hour(endTime), weekday = wday(date, label = TRUE))%>% #wday visual weekday as a string
summarize(minutiAscoltati = sum(minutes), oreAscoltate = minutiAscoltati/60) %>%
ggplot(aes(x = ora, y = minutiAscoltati, group = date, text = paste("ora: ", ora, "<br>", "minuti ascoltati: ", round(minutiAscoltati, digits = 1), "<br>", "ore ascoltate: ", round(oreAscoltate, digits = 0)))) +
geom_col(fill = "#66b2ff") +
labs(x= "Ora del giorno", y= "Minuti di ascolto - secondo periodo") +
ggtitle("Attività da 0 a 23h")
hoursDayDue
#secondo periodo
hoursDayDue <- mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(date, ora = hour(endTime), weekday = wday(date, label = TRUE))%>% #wday visual weekday as a string
summarize(minutiAscoltati = sum(minutes), oreAscoltate = minutiAscoltati/60) %>%
ggplot(aes(x = ora, y = minutiAscoltati, group = date, text = paste("ora: ", ora, "<br>", "minuti ascoltati: ", round(minutiAscoltati, digits = 1), "<br>", "ore ascoltate: ", round(oreAscoltate, digits = 0)))) +
geom_col(fill = "#66b2ff") +
labs(x= "Ora del giorno", y= "Minuti di ascolto") +
ggtitle("Attività da 0 a 23h - secondo periodo")
hoursDayDue
#primo periodo
giornoUno <- mySpotify_2 %>%
filter(date <= "2020-03-24") %>%
group_by(date, hour = hour(endTime), weekday = wday(date, label = TRUE)) %>%
summarize(minutesListened = sum(minutes))
asd <- giornoUno %>%
group_by(weekday, hour) %>%
summarize(minutes = sum(minutesListened)) %>%
ggplot(aes(x = hour, weekday, fill = minutes)) +
geom_tile() +
scale_fill_gradient(low = "green", high = "blue") +
labs(x= "Ora del giorno", y= "Giorno della settimana") +
ggtitle("In quali giorni della settimana ho più attività di ascolto? - primo periodo")
ggplotly(asd)
#secondo periodo
giornoDue <- mySpotify_2 %>%
filter(date >= "2020-03-25") %>%
group_by(date, hour = hour(endTime), weekday = wday(date, label = TRUE)) %>%
summarize(minutesListened = sum(minutes))
asdf <- giornoDue %>%
group_by(weekday, hour) %>%
summarize(minutes = sum(minutesListened)) %>%
ggplot(aes(x = hour, weekday, fill = minutes)) +
geom_tile() +
scale_fill_gradient(low = "green", high = "blue") +
labs(x= "Ora del giorno", y= "Giorno della settimana") +
ggtitle("In quali giorni della settimana ho più attività di ascolto? - secondo periodo")
ggplotly(asdf)
#primo periodo
weekDayUno <- giornoUno %>%
group_by(weekday, hour) %>%
summarize(minutes = sum(minutesListened)) %>%
ggplot(aes(x = hour, y = minutes, color = weekday)) +
geom_line() +
labs(x= "Ora del giorno", y= "Minuti di ascolto") +
ggtitle("In quale giorno della settimana e ora del giorno ho ascoltato più musica?", "Line chart - primo periodo")
weekDayUno
#secondo periodo
weekDayDue <- giornoDue %>%
group_by(weekday, hour) %>%
summarize(minutes = sum(minutesListened)) %>%
ggplot(aes(x = hour, y = minutes, color = weekday)) +
geom_line() +
labs(x= "Ora del giorno", y= "Minuti di ascolto") +
ggtitle("In quale giorno della settimana e ora del giorno ho ascoltato più musica?", "Line chart - secondo periodo")
weekDayDue
topArtistFromSavedTracks = savedTracks %>%
group_by(artist) %>%
count(artist) %>%
arrange(-n)
green <- "#1ed760"
yellow <- "#e7e247"
pink <- "#ff6f59"
blue <- "#17bebb"
# top artisti basato sulle canzoni salvate
plotMyFavs <- topArtistFromSavedTracks %>%
filter(n >= 11) %>%
mutate(freq = case_when(n > 100 ~ '> 100 brani',
between(n, 50, 99) ~ '50-99 brani',
between(n, 20, 49) ~ '20-49 brani',
TRUE ~ '< 20 brani')) %>%
mutate(freq = factor(freq, levels = c('> 100 brani', '50-99 brani', '20-49 brani', '< 20 brani'))) %>%
ggplot(mapping = aes(x = reorder(artist, -n), y = n, fill = freq, , text = paste("artista: ", artist, "<br>", "n canzoni : ", n))) +
geom_col() +
scale_fill_manual(values=c(green, yellow, pink, blue)) +
labs(x= "Artista", y= "Numero di canzoni", fill = NULL) +
ggtitle("Top artisti basato sulle canzoni salvate") +
theme(axis.text.x = element_text(angle = -60),
axis.title = element_text(face = 'bold'),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 15),
plot.caption = element_text(hjust = 1,face = 'bold.italic'))
ggplotly(plotMyFavs, tooltip=c("text"))
#taylor complete collection: 267 brani
#lana comlete collection: 107 brani
topArtistFromSavedTracks = savedTracks %>%
group_by(artist) %>%
count(artist) %>%
arrange(-n)
green <- "#1ed760"
yellow <- "#e7e247"
pink <- "#ff6f59"
blue <- "#17bebb"
# top artisti basato sulle canzoni salvate
plotMyFavs <- topArtistFromSavedTracks %>%
filter(n >= 11) %>%
mutate(freq = case_when(n > 100 ~ '> 100 brani',
between(n, 50, 99) ~ '50-99 brani',
between(n, 20, 49) ~ '20-49 brani',
TRUE ~ '< 20 brani')) %>%
mutate(freq = factor(freq, levels = c('> 100 brani', '50-99 brani', '20-49 brani', '< 20 brani'))) %>%
ggplot(mapping = aes(x = reorder(artist, -n), y = n, fill = freq, , text = paste("artista: ", artist, "<br>", "n canzoni : ", n))) +
geom_col() +
scale_fill_manual(values=c(green, yellow, pink, blue)) +
labs(x= "Artista", y= "Numero di canzoni", fill = NULL) +
ggtitle("Top artisti basato sulle canzoni salvate nella mia libreria") +
theme(axis.text.x = element_text(angle = -60),
axis.title = element_text(face = 'bold'),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 15),
plot.caption = element_text(hjust = 1,face = 'bold.italic'))
ggplotly(plotMyFavs, tooltip=c("text"))
#taylor complete collection: 267 brani
#lana comlete collection: 107 brani
#mostStreamedSongs = streamHistory2 %>%
mostStreamedSongs = completeTot %>%
filter(msPlayed >= 50000, endTime >= "2019-01-01 00:00:00") %>% #50 secondi
group_by(trackName, artistName) %>%
count(trackName) %>%
arrange(-n) %>%
filter(n >= 80)
mostStreamedArtist = mostStreamedSongs %>%
group_by(artistName) %>%
count(artistName) %>%
arrange(-n)
#provo grafico, nei 2 assi n volte e titolo brano, colore artista
#n come colore?
#y frequenza e x top 50
#x artista, y numerosità
p <- mostStreamedSongs %>%
ggplot(aes(x = reorder(trackName, -n), y = n, fill = artistName, text = paste("track Name: ", trackName, "<br>", "artist: ", artistName, "<br>", "n: ", n))) +
geom_col() +
ggtitle("Le mie canzoni più ascoltate dall'inizio! (> 80 volte)")+
theme(axis.text.x = element_blank())+
labs(x= "tracce", y= "n")
ggplotly(p, tooltip=c("text"))
shortTermArtists <- get_my_top_artists_or_tracks(type = 'artists', time_range = 'short_term', limit = 8)
View(shortTermArtists)
shortTermArtists <- get_my_top_artists_or_tracks(type = 'artists', time_range = 'short_term', limit = 8) %>%
select(name, genres, popularity) %>%
rowwise %>%
mutate(genres = paste(genres, collapse = ', ')) %>%
ungroup
View(shortTermArtists)
shortTermArtists <- get_my_top_artists_or_tracks(type = 'artists', time_range = 'short_term', limit = 8) %>%
select(name, genres, popularity) %>%
rowwise %>%
mutate(genres = paste(genres, collapse = ', ')) %>%
ungroup
shortTermArtists
get_my_top_artists_or_tracks(type = 'artists', time_range = 'short_term', limit = 8)
shortTermArtists <- get_my_top_artists_or_tracks(type = 'artists', time_range = 'short_term', limit = 8) %>%
select(name, genres, popularity) %>%
rowwise %>%
mutate(genres = paste(genres, collapse = ', ')) %>%
ungroup
shortTermArtists
favArtist1 <- get_artist_audio_features(artist= "Taylor Swift")
favArtist2 <- get_artist_audio_features(artist= "Lorde")
favArtist3 <- get_artist_audio_features(artist= "Lana Del Rey")
favArtist4 <- get_artist_audio_features(artist= "Tove Lo")
favArtist5 <- get_artist_audio_features(artist= "Sasha Alex Sloan")
favArtist6 <- get_artist_audio_features(artist= "Avril Lavigne")
favArtist7 <- get_artist_audio_features(artist= "Chase Atlantic")
favArtist8 <- get_artist_audio_features(artist= "HAIM")
favArtist1 <- favArtist1[which(favArtist1$album_name %in% c("1989 (Deluxe)","evermore (deluxe version)", "Fearless (Platinum Edition)", "Fearless (Taylor's Version)", "folklore (deluxe version)", "Lover", "Red (Deluxe Edition)", "reputation", "Speak Now (Deluxe Package)", "Taylor Swift")),]
#prendo le canzoni uniche, non ripetute
favArtist1 <- favArtist1 %>%
distinct(track_name, .keep_all = TRUE)
#prendo solo gli album utili per lorde
favArtist2 <- favArtist2[which(favArtist5$album_name %in% c("Melodrama", "Pure Heroine (Extended)")),]
#prendo le canzoni uniche, non ripetute
favArtist2 <- favArtist2 %>%
distinct(track_name, .keep_all = TRUE)
#prendo solo gli album utili per lana
favArtist3 <- favArtist3[which(favArtist2$album_name %in% c("Born To Die – Paradise Edition (Special Version)", "Chemtrails Over The Country Club", "Honeymoon", "Lust For Life", "Norman Fucking Rockwell!", "Ultraviolence (Deluxe)")),]
favArtist1 <- get_artist_audio_features(artist= "Taylor Swift")
favArtist2 <- get_artist_audio_features(artist= "Lorde")
favArtist3 <- get_artist_audio_features(artist= "Lana Del Rey")
favArtist4 <- get_artist_audio_features(artist= "Tove Lo")
favArtist5 <- get_artist_audio_features(artist= "Sasha Alex Sloan")
favArtist6 <- get_artist_audio_features(artist= "Avril Lavigne")
favArtist7 <- get_artist_audio_features(artist= "Chase Atlantic")
favArtist8 <- get_artist_audio_features(artist= "HAIM")
favArtist1 <- favArtist1[which(favArtist1$album_name %in% c("1989 (Deluxe)","evermore (deluxe version)", "Fearless (Platinum Edition)", "Fearless (Taylor's Version)", "folklore (deluxe version)", "Lover", "Red (Deluxe Edition)", "reputation", "Speak Now (Deluxe Package)", "Taylor Swift")),]
#prendo le canzoni uniche, non ripetute
favArtist1 <- favArtist1 %>%
distinct(track_name, .keep_all = TRUE)
#prendo solo gli album utili per lorde
favArtist2 <- favArtist2[which(favArtist2$album_name %in% c("Melodrama", "Pure Heroine (Extended)")),]
#prendo le canzoni uniche, non ripetute
favArtist2 <- favArtist2 %>%
distinct(track_name, .keep_all = TRUE)
#prendo solo gli album utili per lana
favArtist3 <- favArtist3[which(favArtist3$album_name %in% c("Born To Die – Paradise Edition (Special Version)", "Chemtrails Over The Country Club", "Honeymoon", "Lust For Life", "Norman Fucking Rockwell!", "Ultraviolence (Deluxe)")),]
#prendo le canzoni uniche, non ripetute
favArtist3 <- favArtist3 %>%
distinct(track_name, .keep_all = TRUE)
View(favArtist4)
View(favArtist5)
View(favArtist7)
View(favArtist8)
View(favArtist4)
favArtist4 <- favArtist4[which(favArtist4$album_name %in% c("Sunshine Kitty", "BLUE LIPS (lady wood phase II)", "Lady Wood", "Queen Of The Clouds")),]
#prendo le canzoni uniche, non ripetute
favArtist4 <- favArtist4 %>%
distinct(track_name, .keep_all = TRUE)
favArtist5 <- get_artist_audio_features(artist= "Sasha Alex Sloan", include_groups = c("album", "single", "appears_on"))
View(favArtist5)
favArtist5 <- favArtist5[which(favArtist5$album_name %in% c("Only Child", "Love Runs Out (feat. G-Eazy & Sasha Alex Sloan)", "barcelona", "when was it over? (feat. Sam Hunt)", "Self Portrait", "Loser", "sad girl")),]
#prendo le canzoni uniche, non ripetute
favArtist5 <- favArtist5 %>%
distinct(track_name, .keep_all = TRUE)
View(favArtist5)
View(favArtist6)
#avril è okay ma prendo le canzoni uniche
favArtist6 <- favArtist6 %>%
distinct(track_name, .keep_all = TRUE)
View(favArtist7)
favArtist7 <- get_artist_audio_features(artist= "Chase Atlantic", include_groups = c("album", "single"))
View(favArtist7)
View(favArtist6)
#prendo solo gli album utili per i chase atlantic
favArtist7 <- favArtist7[which(favArtist7$album_name %in% c("Dalliance", "Nostalgia", "Paradise EP", "Part One", "Self Portrait", "Part Two", "Part Three", "DON'T TRY THIS", "Chase Atlantic", "hurts 2 hate somebody (with Chase Atlantic & No Rome)", "PHASES", "BEAUTY IN DEATH")),]
#prendo le canzoni uniche, non ripetute
favArtist7 <- favArtist7 %>%
distinct(track_name, .keep_all = TRUE)
View(favArtist7)
favArtist8 <- get_artist_audio_features(artist= "HAIM", include_groups = c("album", "appears_on"))
View(favArtist8)
#prendo solo gli album utili per le HAIM
favArtist8 <- favArtist8[which(favArtist8$album_name %in% c("Women In Music Pt III (Expanded Edition)", "Something to Tell You", "Days Are Gone (Deluxe Edition)", "evermore (deluxe version)")),]
#prendo le canzoni uniche, non ripetute
favArtist8 <- favArtist8 %>%
distinct(track_name, .keep_all = TRUE)
View(favArtist8)
favArtist8 <- favArtist8[which(favArtist8$album_name %in% c("Women In Music Pt III (Expanded Edition)", "Something to Tell You", "Days Are Gone (Deluxe Edition)")),]
#prendo le canzoni uniche, non ripetute
favArtist8 <- favArtist8 %>%
distinct(track_name, .keep_all = TRUE)
View(favArtist2)
favArtist2 <- get_artist_audio_features(artist= "Lorde", include_groups = c("album", "appears_on"))
favArtist2 <- get_artist_audio_features(artist= "Lorde", include_groups = c("album", "single"))
View(favArtist2)
favArtist2 <- favArtist2[which(favArtist2$album_name %in% c("Solar Power", "Melodrama", "Pure Heroine (Extended)", "Yellow Flicker Beat (From The Hunger Games: Mockingjay Part 1)")),]
#prendo le canzoni uniche, non ripetute
favArtist2 <- favArtist2 %>%
distinct(track_name, .keep_all = TRUE)
View(favArtist2)
# MAKE A SINGLE DATA FRAME
topFiveArtists <- rbind(favArtist1, favArtist2, favArtist3, favArtist4, favArtist5, favArtist6, favArtist7, favArtist8)
# PLOT EMOTIONAL QUADRANT TOP FIVE ARTISTS
emotionalQuadrant <- ggplot(data = topFiveArtists, aes(x = valence, y = energy, color = artist_name)) +
geom_jitter(aes(text = track_name)) +
geom_vline(xintercept = 0.5) + #righe per dividere in 4
geom_hline(yintercept = 0.5) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
annotate('text', 0.25 / 2, 0.95, label = "Arrabbiato / Turbolento") +
annotate('text', 1.75 / 2, 0.95, label = "Gioioso / Felice") +
annotate('text', 1.75 / 2, 0.05, label = "Pacifico / Tranquillo") +
annotate('text', 0.25 / 2, 0.05, label = "Deprimente / Triste") +
labs(x= "Valence", y= "Energy") +
ggtitle("Quadrante emotivo dei miei primi cinque artisti")
ggplotly(emotionalQuadrant)
emotionalQuadrant <- ggplot(data = topFiveArtists, aes(x = valence, y = energy, color = artist_name)) +
geom_jitter(aes(text = track_name)) +
geom_vline(xintercept = 0.5) + #righe per dividere in 4
geom_hline(yintercept = 0.5) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
annotate('text', 0.25 / 2, 0.95, label = "Arrabbiato / Turbolento") +
annotate('text', 1.75 / 2, 0.95, label = "Gioioso / Felice") +
annotate('text', 1.75 / 2, 0.05, label = "Pacifico / Tranquillo") +
annotate('text', 0.25 / 2, 0.05, label = "Deprimente / Triste") +
labs(x= "Valence", y= "Energy") +
ggtitle("Quadrante emotivo dei miei artisti più ascoltati nell'ultimo mese")
ggplotly(emotionalQuadrant)
emotionalQuadrant <- ggplot(data = topFiveArtists, aes(x = valence, y = energy, color = artist_name)) +
geom_jitter(aes(text = track_name)) +
geom_vline(xintercept = 0.5) + #righe per dividere in 4
geom_hline(yintercept = 0.5) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
annotate('text', 0.2, 0.95, label = "Arrabbiato / Turbolento") +
annotate('text', 1.75 / 2, 0.95, label = "Gioioso / Felice") +
annotate('text', 1.75 / 2, 0.05, label = "Pacifico / Tranquillo") +
annotate('text', 0.25 / 2, 0.05, label = "Deprimente / Triste") +
labs(x= "Valence", y= "Energy") +
ggtitle("Quadrante emotivo dei miei artisti più ascoltati nell'ultimo mese")
ggplotly(emotionalQuadrant)
emotionalQuadrant <- ggplot(data = topFiveArtists, aes(x = valence, y = energy, color = artist_name)) +
geom_jitter(aes(text = track_name)) +
geom_vline(xintercept = 0.5) + #righe per dividere in 4
geom_hline(yintercept = 0.5) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
annotate('text', 0.17, 0.95, label = "Arrabbiato / Turbolento") +
annotate('text', 1.75 / 2, 0.95, label = "Gioioso / Felice") +
annotate('text', 1.75 / 2, 0.05, label = "Pacifico / Tranquillo") +
annotate('text', 0.25 / 2, 0.05, label = "Deprimente / Triste") +
labs(x= "Valence", y= "Energy") +
ggtitle("Quadrante emotivo dei miei artisti più ascoltati nell'ultimo mese")
ggplotly(emotionalQuadrant)
generi <- plot_ly(gen, labels = ~nome, values = ~tot, type = 'pie')
generi <- generi %>% layout(title = 'Generi più riprodotti ultimamente',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
generi
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable() #funzione di knitr per creare tabelle
